// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TournamentPrizeDistribution {
    address public organizer;
    uint public totalPrizePool;
    bool public prizeDistributed;

    address[3] public winners;
    uint[3] public prizeAmounts;

    constructor() {
        organizer = msg.sender;
        prizeDistributed = false;
    }

    // Organizer can deposit the prize pool
    function depositPrize() external payable {
        require(msg.sender == organizer, "Only organizer can deposit");
        require(msg.value > 0, "Prize amount must be greater than zero");
        totalPrizePool += msg.value;
    }

    // Organizer distributes the prize to top 3 winners
    function distributePrizes(address[3] calldata _winners, uint[3] calldata _amounts) external {
        require(msg.sender == organizer, "Only organizer can distribute");
        require(!prizeDistributed, "Prizes already distributed");
        require(_amounts[0] + _amounts[1] + _amounts[2] <= totalPrizePool, "Insufficient prize pool");

        winners = _winners;
        prizeAmounts = _amounts;

        for (uint i = 0; i < 3; i++) {
            payable(_winners[i]).transfer(_amounts[i]);
        }

        prizeDistributed = true;
    }

    // View prize info of a specific winner
    function getWinnerInfo(uint index) external view returns (address winner, uint prize) {
        require(index < 3, "Invalid index");
        return (winners[index], prizeAmounts[index]);
    }

    // Organizer can withdraw remaining funds after distribution
    function withdrawRemainingFunds() external {
        require(msg.sender == organizer, "Only organizer can withdraw");
        require(prizeDistributed, "Prizes not distributed yet");

        uint remainingBalance = address(this).balance;
        require(remainingBalance > 0, "No remaining balance");

        payable(organizer).transfer(remainingBalance);
    }

    // Allow contract to receive ETH directly
    receive() external payable {
        totalPrizePool += msg.value;
    }

    // Fallback function to accept ETH sent to the contract by mistake
    fallback() external payable {
        totalPrizePool += msg.value;
    }

    // View current contract balance
    function getContractBalance() external view returns (uint) {
        return address(this).balance;
    }

    // Organizer can reset the tournament for reuse
    function resetTournament() external {
        require(msg.sender == organizer, "Only organizer can reset");
        require(prizeDistributed, "Cannot reset before distributing prizes");

        delete winners;
        delete prizeAmounts;
        totalPrizePool = address(this).balance;
        prizeDistributed = false;
    }

    // Update a specific winner before prize distribution
    function updateWinner(uint index, address newWinner, uint newAmount) external {
        require(msg.sender == organizer, "Only organizer can update");
        require(!prizeDistributed, "Cannot update after distribution");
        require(index < 3, "Invalid index");

        winners[index] = newWinner;
        prizeAmounts[index] = newAmount;
    }

    // Change the organizer of the tournament
    function changeOrganizer(address newOrganizer) external {
        require(msg.sender == organizer, "Only current organizer can change");
        require(newOrganizer != address(0), "New organizer cannot be zero address");

        organizer = newOrganizer;
    }

    // Returns true if a given address is a winner
    function isWinner(address _addr) external view returns (bool) {
        for (uint i = 0; i < 3; i++) {
            if (winners[i] == _addr) {
                return true;
            }
        }
        return false;
    }

    // View all winners and their prizes
    function getAllWinners() external view returns (address[3] memory, uint[3] memory) {
        return (winners, prizeAmounts);
    }

    // Emergency withdrawal by organizer if something goes wrong
    function emergencyWithdraw() external {
        require(msg.sender == organizer, "Only organizer can withdraw");
        uint balance = address(this).balance;
        require(balance > 0, "No funds to withdraw");

        totalPrizePool = 0;
        payable(organizer).transfer(balance);
    }

    // View how much a specific winner will receive
    function getPrizeAmount(address _winner) external view returns (uint prize) {
        for (uint i = 0; i < 3; i++) {
            if (winners[i] == _winner) {
                return prizeAmounts[i];
            }
        }
        return 0;
    }

    // --------------------- NEW FUNCTIONS ----------------------

    // View total prize distributed
    function getTotalPrizeDistributed() external view returns (uint) {
        if (!prizeDistributed) {
            return 0;
        }
        return prizeAmounts[0] + prizeAmounts[1] + prizeAmounts[2];
    }

    // View remaining prize pool (after distribution)
    function getRemainingPrizePool() external view returns (uint) {
        if (!prizeDistributed) {
            return totalPrizePool;
        }
        return address(this).balance;
    }

    // View organizer address (explicit function)
    function getOrganizer() external view returns (address) {
        return organizer;
    }

    // Allow organizer to refund the whole prize pool before distribution (in case tournament is cancelled)
    function cancelTournamentAndRefund() external {
        require(msg.sender == organizer, "Only organizer can cancel");
        require(!prizeDistributed, "Cannot cancel after prize distribution");
        require(address(this).balance > 0, "No funds to refund");

        uint balance = address(this).balance;
        totalPrizePool = 0;
        payable(organizer).transfer(balance);
    }

    // Replace all winners at once before distribution
    function updateAllWinners(address[3] calldata _newWinners, uint[3] calldata _newAmounts) external {
        require(msg.sender == organizer, "Only organizer can update winners");
        require(!prizeDistributed, "Cannot update after distribution");

        winners = _newWinners;
        prizeAmounts = _newAmounts;
    }

    // ------------------- MORE NEW FUNCTIONS -------------------

    // Get the rank (1-based) of a winner
    function viewWinnerRank(address _winner) external view returns (uint rank) {
        for (uint i = 0; i < 3; i++) {
            if (winners[i] == _winner) {
                return i + 1;
            }
        }
        return 0; // Not a winner
    }

    // Explicit function to check if prizes have been distributed
    function hasPrizesDistributed() external view returns (bool) {
        return prizeDistributed;
    }

    // Get percentage share of prize pool a winner received
    function getPrizeSharePercentage(address _winner) external view returns (uint percentage) {
        uint prize = 0;
        for (uint i = 0; i < 3; i++) {
            if (winners[i] == _winner) {
                prize = prizeAmounts[i];
                break;
            }
        }
        if (totalPrizePool == 0 || prize == 0) {
            return 0;
        }
        return (prize * 10000) / totalPrizePool; // Percentage * 100
    }

    // Get top (1st place) winner
    function getTopWinner() external view returns (address) {
        return winners[0];
    }

    // View unclaimed prize pool (if any)
    function getUnclaimedPrizePool() external view returns (uint) {
        if (!prizeDistributed) {
            return totalPrizePool;
        }
        uint distributed = prizeAmounts[0] + prizeAmounts[1] + prizeAmounts[2];
        if (address(this).balance >= distributed) {
            return address(this).balance - distributed;
        } else {
            return 0;
        }
    }

    // Update only the prize amount for a winner before distribution
    function updatePrizeAmount(uint index, uint newAmount) external {
        require(msg.sender == organizer, "Only organizer can update prize");
        require(!prizeDistributed, "Cannot update after distribution");
        require(index < 3, "Invalid index");

        prizeAmounts[index] = newAmount;
    }

    // Organizer can withdraw specific amount after distribution
    function withdrawSpecificAmount(uint amount) external {
        require(msg.sender == organizer, "Only organizer can withdraw");
        require(prizeDistributed, "Prizes must be distributed first");
        require(amount <= address(this).balance, "Insufficient contract balance");

        payable(organizer).transfer(amount);
    }
}


